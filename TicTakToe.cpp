//
// Created by lenovo on 1.11.2024.
//

#include "TicTacToe.h"

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <iostream>
#include <jni_md.h>
#include <jni.h>
#include <algorithm>
#include <vector>
/* Header for class TicTacToe */

#ifndef _Included_TicTacToe
#define _Included_TicTacToe
#ifdef __cplusplus
extern "C" {
#endif
#undef TicTacToe_FOCUS_TRAVERSABLE_UNKNOWN
#define TicTacToe_FOCUS_TRAVERSABLE_UNKNOWN 0L
#undef TicTacToe_FOCUS_TRAVERSABLE_DEFAULT
#define TicTacToe_FOCUS_TRAVERSABLE_DEFAULT 1L
#undef TicTacToe_FOCUS_TRAVERSABLE_SET
#define TicTacToe_FOCUS_TRAVERSABLE_SET 2L
#undef TicTacToe_TOP_ALIGNMENT
#define TicTacToe_TOP_ALIGNMENT 0.0f
#undef TicTacToe_CENTER_ALIGNMENT
#define TicTacToe_CENTER_ALIGNMENT 0.5f
#undef TicTacToe_BOTTOM_ALIGNMENT
#define TicTacToe_BOTTOM_ALIGNMENT 1.0f
#undef TicTacToe_LEFT_ALIGNMENT
#define TicTacToe_LEFT_ALIGNMENT 0.0f
#undef TicTacToe_RIGHT_ALIGNMENT
#define TicTacToe_RIGHT_ALIGNMENT 1.0f
#undef TicTacToe_serialVersionUID
#define TicTacToe_serialVersionUID -7644114512714619750i64
#undef TicTacToe_serialVersionUID
#define TicTacToe_serialVersionUID 4613797578919906343i64
#undef TicTacToe_INCLUDE_SELF
#define TicTacToe_INCLUDE_SELF 1L
#undef TicTacToe_SEARCH_HEAVYWEIGHTS
#define TicTacToe_SEARCH_HEAVYWEIGHTS 1L
#undef TicTacToe_OPENED
#define TicTacToe_OPENED 1L
#undef TicTacToe_serialVersionUID
#define TicTacToe_serialVersionUID 4497834738069338734i64
#undef TicTacToe_DEFAULT_CURSOR
#define TicTacToe_DEFAULT_CURSOR 0L
#undef TicTacToe_CROSSHAIR_CURSOR
#define TicTacToe_CROSSHAIR_CURSOR 1L
#undef TicTacToe_TEXT_CURSOR
#define TicTacToe_TEXT_CURSOR 2L
#undef TicTacToe_WAIT_CURSOR
#define TicTacToe_WAIT_CURSOR 3L
#undef TicTacToe_SW_RESIZE_CURSOR
#define TicTacToe_SW_RESIZE_CURSOR 4L
#undef TicTacToe_SE_RESIZE_CURSOR
#define TicTacToe_SE_RESIZE_CURSOR 5L
#undef TicTacToe_NW_RESIZE_CURSOR
#define TicTacToe_NW_RESIZE_CURSOR 6L
#undef TicTacToe_NE_RESIZE_CURSOR
#define TicTacToe_NE_RESIZE_CURSOR 7L
#undef TicTacToe_N_RESIZE_CURSOR
#define TicTacToe_N_RESIZE_CURSOR 8L
#undef TicTacToe_S_RESIZE_CURSOR
#define TicTacToe_S_RESIZE_CURSOR 9L
#undef TicTacToe_W_RESIZE_CURSOR
#define TicTacToe_W_RESIZE_CURSOR 10L
#undef TicTacToe_E_RESIZE_CURSOR
#define TicTacToe_E_RESIZE_CURSOR 11L
#undef TicTacToe_HAND_CURSOR
#define TicTacToe_HAND_CURSOR 12L
#undef TicTacToe_MOVE_CURSOR
#define TicTacToe_MOVE_CURSOR 13L
#undef TicTacToe_NORMAL
#define TicTacToe_NORMAL 0L
#undef TicTacToe_ICONIFIED
#define TicTacToe_ICONIFIED 1L
#undef TicTacToe_MAXIMIZED_HORIZ
#define TicTacToe_MAXIMIZED_HORIZ 2L
#undef TicTacToe_MAXIMIZED_VERT
#define TicTacToe_MAXIMIZED_VERT 4L
#undef TicTacToe_MAXIMIZED_BOTH
#define TicTacToe_MAXIMIZED_BOTH 6L
#undef TicTacToe_serialVersionUID
#define TicTacToe_serialVersionUID 2673458971256075116i64
/*
 * Class:     TicTacToe
 * Method:    checkForWin
 * Signature: (IIC)Z
 */
JNIEXPORT jboolean JNICALL Java_TicTacToe_checkForWin
  (JNIEnv *, jobject, jint, jint, jchar);

/*
 * Class:     TicTacToe
 * Method:    isDraw
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_TicTacToe_isDraw
  (JNIEnv *, jobject);

/*
 * Class:     TicTacToe
 * Method:    resetGame
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_TicTacToe_resetGame
  (JNIEnv *, jobject);

#ifdef __cplusplus
}
#endif
#endif
//drink water

std::vector<std::vector<char>> board(4, std::vector<char>(4, ' '));


JNIEXPORT jboolean JNICALL Java_TicTacToe_checkForWin(JNIEnv *env, jobject ob, jint x, jint y, jchar player) {
    board[x][y] = player;


    //in my version of the classic tic-tac-toe player wins by having 3 in a row not the whole segment
    for(int i = 0; i < 4; i++) {
        if(board[1][i] == player && board[2][i] == player ) {
            if(board[0][i] == player||board[3][i] == player) return JNI_TRUE;
            else break;
        }
    }

    for(int i = 0; i < 4; i++) {
        if(board[i][1] == player && board[i][2] == player ) {
            if(board[i][0] == player||board[i][3] == player) return JNI_TRUE;
            else break;
        }
    }

    if(board[1][1] == player && board[2][2] == player) {
        if(board[0][0] == player||board[3][3] == player) return JNI_TRUE;
    }

    if(board[2][1] == player && board[1][2] == player) {
        if(board[3][0] == player||board[0][3] == player) return JNI_TRUE;
    }

    if(board[1][0] == player && board[2][1] == player && board[3][2] == player) return JNI_TRUE;
    if(board[0][1] == player && board[1][2] == player && board[2][3] == player) return JNI_TRUE;
    if(board[2][0] == player && board[1][1] == player && board[0][2] == player) return JNI_TRUE;
    if(board[3][1] == player && board[2][2] == player && board[1][3] == player) return JNI_TRUE; //make it prettier if u got time

    return JNI_FALSE;
}
//drink water


JNIEXPORT jboolean JNICALL Java_TicTacToe_isDraw(JNIEnv *env, jobject ob) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            if (board[i][j] == ' ') return JNI_FALSE;
        }
    }
    return JNI_TRUE;
}

JNIEXPORT void JNICALL Java_TicTacToe_resetGame(JNIEnv *env, jobject ob) {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            board[i][j] = ' ';
        }
    }
}